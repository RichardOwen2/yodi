// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // provider = "postgresql"
  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum AccountStatus {
  ACTIVE
  BANNED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILURE
  REFUNDED
}

enum OrderStatus {
  PAYMENT             @map("Menunggu pembayaran")
  SELLER_VERIFICATION @map("Verifikasi Seller")
  PRODUCT_PROCESS     @map("Pesanan diproses")
  READY               @map("Pesanan siap diantar")
  SHIPPING            @map("Pesanan sedang diantar")
  ARRIVE              @map("Pesanan sudah sampai tujuan")
  DONE                @map("Pesanan selesai")
  CANCEL              @map("Pesanan dibatalkan")
  REJECT              @map("Pesanan ditolak")
}

enum RequestStatus {
  SELLER_VERIFICATION @map("Verifikasi Seller")
  PAYMENT             @map("Menunggu pembayaran")
  PRODUCT_PROCESS     @map("Pesanan diproses")
  READY               @map("Pesanan siap diantar")
  SHIPPING            @map("Pesanan sedang diantar")
  ARRIVE              @map("Pesanan sudah sampai tujuan")
  DONE                @map("Pesanan selesai")
  CANCEL              @map("Pesanan dibatalkan")
  REJECT              @map("Pesanan ditolak")
}

model User {
  id          String        @id
  username    String        @unique
  email       String        @unique
  image       String?
  phoneNumber String?       @map("phone_number")
  status      AccountStatus @default(ACTIVE)
  password    String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  seller      Seller?
  admin       Admin?
  userAddress UserAddress[]
  itemOrder   ItemOrder[]
  itemRequest ItemRequest[]
  cart        Cart[]
}

model UserAddress {
  id         String   @id
  userId     String
  label      String
  city       String
  postalCode String   @map("postcal_code")
  address    String
  note       String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_address")
}

model Seller {
  id         String    @id
  userId     String    @unique
  city       String
  address    String
  soldCount  Int       @default(0) @map("sold_count")
  verifiedAt DateTime? @map("verified_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item        Item[]
  itemRequest ItemRequest[]
  bank        Bank?
  itemOrder   ItemOrder[]
}

model Bank {
  userId     String @id @map("user_id")
  bankName   String @map("bank_name")
  bankNumber String @map("bank_number")
  ownerName  String @map("owner_name")

  seller Seller @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id        String   @id
  userId    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shipper {
  id        String   @id
  name      String
  price     Int
  city      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Item {
  id          String    @id
  owner       String
  title       String
  description String
  sold        Int       @default(0)
  verifiedAt  DateTime? @map("verified_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  seller Seller @relation(fields: [owner], references: [id], onDelete: Cascade)

  cart        Cart[]
  itemVariant ItemVariant[]
  itemImage   ItemImage[]
}

model ItemImage {
  id     Int    @id @default(autoincrement())
  itemId String @map("item_id")
  image  String

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_image")
}

model ItemVariant {
  id        String   @id
  itemId    String
  label     String
  price     Int
  stock     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  item        Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  cartVariant CartVariant[]

  @@map("item_variant")
}

model Cart {
  id        String   @id
  userId    String   @map("user_id")
  itemId    String   @map("item_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item        Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  cartVariant CartVariant[]

  @@unique([userId, itemId])
}

model CartVariant {
  id            String   @id
  cartId        String   @map("cart_id")
  itemVariantId String   @map("item_variant_id")
  amount        Int
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  itemVariant ItemVariant @relation(fields: [itemVariantId], references: [id], onDelete: Cascade)

  @@unique([cartId, itemVariantId])
  @@map("cart_variant")
}

model ItemOrder {
  id           String   @id
  userId       String   @map("user_id")
  sellerId     String   @map("seller_id")
  title        String
  description  String
  itemNote     String   @map("item_note")
  city         String
  address      String
  postalCode   String
  addressNote  String?  @map("address_note")
  shipper      String
  shipperPrice Int      @map("shipper_price")
  price        Int
  amount       Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  itemOrderStatus         ItemOrderStatus[]
  itemOrderVariant        ItemOrderVariant[]
  itemOrderImage          ItemOrderImage[]
  itemOrderShippingStatus ItemOrderShippingStatus[]
  itemOrderPayment        ItemOrderPayment?

  @@map("item_order")
}

model ItemOrderImage {
  id      Int    @id @default(autoincrement())
  orderId String @map("order_id")
  image   String

  itemOrder ItemOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("item_order_image")
}

model ItemOrderVariant {
  id          String   @id
  itemOrderId String   @map("item_order_id")
  label       String
  amount      Int
  price       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  itemOrder ItemOrder @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)

  @@map("item_order_variant")
}

model ItemOrderStatus {
  id          String      @id
  itemOrderId String      @map("item_order_id")
  status      OrderStatus
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  itemOrder ItemOrder @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)

  @@map("item_order_status")
}

model ItemOrderPayment {
  id            String   @id
  itemOrderId   String   @unique @map("item_order_id")
  token         String
  redirectUrl   String   @map("redirect_url")
  paymentStatus String   @default("PENDING") @map("payment_status")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  itemOrder              ItemOrder               @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)
  ItemOrderPaymentDetail ItemOrderPaymentDetail?
}

model ItemOrderPaymentDetail {
  itemOrderPaymentId String   @id @map("item_order_payment_id")
  transactionTime    DateTime @map("transaction_time")
  grossAmount        Int      @map("gross_amount")
  currency           String
  paymentType        String   @map("payment_type")
  signatureKey       String   @map("signature_key")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  itemOrderPayment ItemOrderPayment @relation(fields: [itemOrderPaymentId], references: [id], onDelete: Cascade)

  @@map("item_order_payment_detail")
}

model ItemOrderShippingStatus {
  id          String   @id
  itemOrderId String   @map("item_order_id")
  status      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  itemOrder ItemOrder @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)

  @@map("item_order_shipping_status")
}

model ItemRequest {
  id          String   @id
  userId      String   @map("user_id")
  sellerId    String   @map("seller_id")
  itemName    String   @map("item_name")
  image       String
  description String
  itemNote    String
  price       Int
  amount      Int
  city        String
  address     String
  postalCode  String
  addressNote String?  @map("address_note")
  shipper     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  ItemRequestVariant        ItemRequestVariant[]
  itemRequestStatus         ItemRequestStatus[]
  itemRequestImage          ItemRequestImage[]
  itemRequestShippingStatus ItemRequestShippingStatus[]
  itemRequestPayment        ItemRequestPayment?

  @@map("item_request")
}

model ItemRequestVariant {
  id            String   @id
  itemRequestId String   @map("item_order_id")
  label         String
  amount        Int
  price         Int
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  itemRequest ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)

  @@map("item_request_variant")
}

model ItemRequestImage {
  id            Int    @id @default(autoincrement())
  itemRequestId String @map("item_request_id")
  image         String

  itemRequest ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)

  @@map("item_request_image")
}

model ItemRequestStatus {
  id            String        @id
  itemRequestId String        @map("item_request_id")
  status        RequestStatus
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  itemRequest ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)

  @@map("item_request_status")
}

model ItemRequestPayment {
  transactionId String  @id @map("transaction_id")
  itemRequestId String  @unique @map("item_request_id")
  paymentStatus String  @map("payment_status")
  note          String?

  itemRequest ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)
}

model ItemRequestShippingStatus {
  id            String   @id
  itemRequestId String   @map("item_request_id")
  status        String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  itemOrder ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)

  @@map("item_request_shipping_status")
}
