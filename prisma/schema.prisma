// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ItemStatus {
  PAYMENT             @map("Menunggu pembayaran")
  SELLER_VERIFICATION @map("Verifikasi Seller")
  PRODUCT_PROCESS     @map("Pesanan diproses")
  READY               @map("Pesanan siap diambil")
  DONE                @map("Pesanan selesai")
  CANCEL              @map("Pesanan dibatalkan")
  REJECT              @map("Pesanan ditolak")
}

model User {
  id        String   @id
  username  String
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Seller      Seller?
  Admin       Admin?
  ItemOrder   ItemOrder[]
  ItemRequest ItemRequest[]
  Item        Item[]
}

model Seller {
  id         String    @id
  userId     String    @unique
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item        Item[]
  ItemRequest ItemRequest[]
}

model Admin {
  id        String   @id
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id          String    @id
  owner       String
  title       String
  description String?
  image       String
  price       Int
  stock       Int
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  seller Seller @relation(fields: [owner], references: [id], onDelete: Cascade)

  ItemOrder ItemOrder[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?
}

model ItemOrder {
  id        String   @id
  userId    String
  itemId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  ItemOrderStatus ItemOrderStatus[]
}

model ItemOrderStatus {
  id          String     @id
  itemOrderId String
  status      ItemStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  itemOrder ItemOrder @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)
}

model ItemRequest {
  id          String   @id
  userId      String
  sellerId    String
  image       String
  description String
  price       Int
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  ItemRequestStatus ItemRequestStatus[]
}

model ItemRequestStatus {
  id            String     @id
  itemRequestId String
  status        ItemStatus
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  itemRequest ItemRequest @relation(fields: [itemRequestId], references: [id], onDelete: Cascade)
}
