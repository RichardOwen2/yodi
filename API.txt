DOKUMENTASI API YODI

Template Response =

Success => {
  status: "success",
  data: (if data exist),
  message: (if message exist),
} // Response code 200, 201

Fail => {
  status: "fail",
  message: errorMessage
} // Response code 400, 401, 403, 404

Error => {
  status: 'error',
  message: 'Terjadi kesalahan pada server kami',
} // Response code 500

Database Error => {
  status: 'error',
  message: 'Database service unavailable',
} // Response code 503

------ GUEST ------

Common Fail :
- POST => Body request tidak sesuai


REGISTER
  POST API/REGISTER
  Body Request : {
    username: string,
    email: string,
    password: string,
  }

  Response Data = {
    token: string,
  }

  fail:
  - Username dan email sudah pernah dipakai
  - email tidak valid
  - password kurang dari 8 karakter


LOGIN
  POST API/LOGIN
  Body Request : {
    email: string,
    password: string,
  }

  Response = {
    token: string,
  }

  fail:
  - Kredensial salah


Mendapatkan Data Item (hanya menampilkan item yang sudah diverifikasi oleh admin dan akun yang berstatus aktif)
  GET API/ITEM?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number, itemCount -> number, search -> string | undefined
  search -> berdasarkan title

  Response Data = {
      items: [
            {
                seller: {
                    city: string,
                    user: {
                        username: string,
                        image: string | null
                    }
                },
                id: string,
                title: string,
                description: string,
                sold: number,
                itemImage: [
                    {
                        image: string
                    }, // hanya 1
                ],
                itemVariant: [
                    {
                        price: number
                    },
                    { ... }
                ],
                _count: {
                    itemVariant: number
                }
            },
            { ... }
        ]
  }

  fail :
  - page dan itemCount kurang dari 1
  - page dan itemCount bukan number


Mendapatkan Data Item By Id (hanya menampilkan item yang sudah diverifikasi oleh admin dan akun yang berstatus aktif)
  GET API/ITEM/[id]

  Response Data = {
    item: {
            seller: {
                city: string,
                user: {
                    username: string,
                    image: string | null
                }
            },
            id: string,
            title: string,
            description: string,
            sold: number,
            itemImage: [
                {
                    image: string
                },
                { ... }
            ],
            itemVariant: [
                {
                    label: string,
                    price: number,
                    stock: number
                },
                { ... }
            ],
        }
  }

  fail:
  - item tidak ditemukan


Mendapatkan Shipper
  GET API/SHIPPER

  Response Data = {
    shippers: [
      {
        city: string,
        price: number,
        name: string,
      },
      { ... }
    ]
  }

------ USER ------

Common Fail :
- Token tidak ada
- User diban
- POST => Body request tidak sesuai


Mendapatkan data diri (khusus route ini bisa diakses bahkan jika user terbanned)
  GET API/USER/ME 

  Response Data = {
    username: string,
    status: enum(ACTIVE/BANNED),
    email: string,
    phoneNumber: string | null,
    image: string | null,
    createdAt: Date,
    updatedAt: Date,
  }


Melakukan edit/ Menambahkan data diri (username, phoneNumber, photoProfile)
  PUT API/USER/ME

  Request Body = {
    username: string | undefined,
    image: string | undefined,
    phoneNumber: string | undefined,
  }

  - Semua key optional tetapi harus mengisikan salah satunya

  fail:
  - username sudah digunakan (jika mengisi username)
  - phoneNumber berisikan value selain angka (angka bentuk string) (jika mengisi phoneNumber)


Menambahkan alamat pengiriman
  POST API/USER/ME/ADDRESS

  Body Request = {
    label: string,
    city: string,
    address: string,
    note: string | undefined
  }

  Response Message: "Berhasil menambahkan alamat"


Mendapatkan list alamat pengiriman
  GET API/USER/ME/ADDRESS

  Response Data = {
    address: [
      {
        label: string;
        city: string;
        address: string;
        note: string | null;
      },
      { ... }
    ]
  }


Mengedit alamat pengiriman
  PUT API/USER/ME/ADDRESS

  Body Request = {
    addressId: string,
    label: string | undefined,
    city: string | undefined,
    address: string | undefined,
    note: string | undefined
  }

  - Semua key optional tetapi harus mengisikan salah satunya

  Response Message: "Berhasil mengedit alamat"

  fail :
  - Bukan address miliknya


Menghapus alamat pengiriman
  DELETE API/USER/ME/ADDRESS

  Body Request = {
    addressId: string
  }

  Response Message: "Berhasil menghapus alamat"

  fail:
  - Bukan address miliknya


Mengajukan diri menjadi seller
  POST API/USER/UPGRADE

  Request Body = {
    city: string;
    address: string;
    bankName: string;
    bankNumber: string;
    ownerName: string;
  }

  Response Message = "Berhasil mengajukan akun seller"

  fail:
  - Sudah pernah mengajukan diri
  - Role akun bukan user
  - Bank Number minimal 8
  - User belum menambahkan nomor telephone


Mendapatkan item di cart
  GET API/USER/CART

  Response Data = 
  cart: [
      {
          item: {
              title: dwada,
              seller: {
                  city: aa,
                  user: {
                      image: null
                  }
              },
              itemImage: [
                  {
                      image: a
                  }, // hanya 1
              ]
          },
          cartVariant: [
              {
                  amount: number,
                  itemVariant: {
                      label: string,
                      price: number
                  }
              },
              { ... }
          ]
      },
      { ... }
  ]

  note : jika seller sewaktu-waktu tekena banned, item dlm cart tidak akan ditampilkan


Menambahkan item di cart
  POST API/USER/CART

  Body Request = {
    itemId: string,
    itemVariant: [
      {
        id: string ( id => itemVariantId),
        amount: number
      },
      { ... }
    ]
  }

  Response Message = `Berhasil menambahkan ${title} didalam cart`

  fail : 
  - Amount lebih besar dari stock item yang tersedia
  - amount kurang dari 1
  - Item tidak ditemukan
  - Seller terbanned


Mengubah amount item di cart
  PUT API/USER/CART

  Body Request = {
    cartId: string,
    itemVariant: [
      {
        id: string ( id => itemVariantId),
        amount: number
      },
      { ... }
    ]
  }

  Response Message = `Berhasil melakukan edit jumlah ${title} didalam cart`

  fail : 
  - Amount lebih besar dari stock item yang tersedia
  - amount kurang dari 1
  - Cart item tidak ditemukan
  - Jika mencoba update cart dengan amount yang sama, api akan ttp success tetapi tidak merubah database
  - Seller terbanned


Menghapus itemVariant dalam cart
  DELETE API/USER/CART

  Body Request = {
    cartId: true,
    cartVariant: true
  }

  Response Message = `Berhasil menghapus ${title} didalam cart`

  fail :
  - item tidak ditemukan
  - amount kurang dari 1
  
  note :
  - dapat dihapus meskipun seller terbanned
  - jika semua variant item dihapus maka cart terhapus otomatis


Mendapatkan list item checkout/order
  GET API/USER/ORDER?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number, itemCount -> number, search -> string | undefined
  search -> berdasarkan title

  Response Data = orders: [
      {
          title: string,
          price: number (generate otomatis sebagai total harga),
          amount: number,
          createdAt: Date,
          itemOrderVariant: [
              {
                  label: string,
                  amount: number,
                  price: number
              },
              { ... }
          ],
          itemOrderStatus: [
              {
                  status: PAYMENT (default),
                  createdAt: Date
              }
          ],
          itemOrderImage: [
              {
                  image: string
              } // hanya 1
          ],
          seller: {
              city: aa,
              user: {
                  username: string,
                  image: string | null
              }
          }
      },
      { ... }
  ]


Melakukan checkout/order item
  POST API/USER/ORDER

  Body Request = {
    itemId: string,
    itemNote: string,
    addressId: string,
    shipperId: string,
    itemVariant: [
      {
        id: string, (id => itemVariantId)
        amount: number
      },
      { ... }
    ]
  }

  Response Message = `Berhasil melakukan checkout ${title}`

  fail :
  - item tidak ditemukan
  - amount melebihi stock item
  - amount kurang dari 1
  - seller terbanned
  - user harus sudah mendaftarkan nomor telephone



------ SELLER ------

Common fail :
- Token tidak ada
- User bukan seller
- Seller belum di verifikasi
- Seller diban
- POST => Body request tidak sesuai


Mendapatkan data diri akun seller (khusus route ini bisa diakses bahkan jika user terbanned)
  GET API/SELLER/ME

  Response Data = user: {
      id: string,
      userId: string,
      verifiedAt: string,
      createdAt: Date,
      updatedAt: Date
  }

  fail :
  - Akun seller tidak ditemukan (belum pernah diajukan)


Mengajukan Item Penjualan
  POST API/SELLER/ITEM

  Body Request : {
    title: string,
    description: string | undefined,
    images: [
        string, ...
    ],
    itemVariant: [
        {
            label: string,
            price: number > 1000,
            stock: number > 1
        },
        { ... }
    ]
  }

  Response Message = "Berhasil mengajukan item penjualan"


Mendapatkan list semua item yang diajukan
  GET API/SELLER/ITEM?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number | undefined, itemCount -> number | undefined, search -> string | undefined
  search -> berdasarkan title

  Response Data = {
    items: [
            {
                id: string,
                title: string,
                description: string,
                verifiedAt: Date | null,
                createdAt: Date,
                updatedAt: Date,
                itemImage: [
                    {
                        image: string,
                    }, // hanya menampilkan 1
                ],
                _count: {
                    itemVariant: number,
                    cart: number
                }
            },
            { ... }
        ]
  }

  fail :
  - page dan itemCount kurang dari 1
  - page dan itemCount bukan number


Mendapatkan Item by Id
  GET API/SELLER/ITEM/[id]
  id => itemId

  Response Data = {
    item: {
            id: item-8bb_iUOhAfR-V9Qq,
            title: wa2,
            description: dwa,
            verifiedAt: Date | null,
            createdAt: Date,
            updatedAt: Date,
            itemImage: [
                {
                    image: string
                },
                { ... }
            ],
            itemVariant: [
                {
                    label: string,
                    price: number,
                    stock: number
                },
                { ... }
            ]
      }
  }

  fail :
  - Item tidak ditemukan


Mendapatkan list semua item yang sudah diverifikasi
  GET API/SELLER/ITEM?page=x&itemCount=x&search=x&verified=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number | undefined, itemCount -> number | undefined, search -> string | undefined ,verified -> string apapun
  search -> berdasarkan title

  Response Data = {
    items: [
            {
                id: string,
                title: string,
                description: string,
                verifiedAt: Date,
                createdAt: Date,
                updatedAt: Date,
                itemImage: [
                    {
                        image: string,
                    }, // hanya menampilkan 1
                ],
                _count: {
                    itemVariant: number,
                    cart: number
                }
            },
            { ... }
        ]
  }

  fail :
  - page dan itemCount kurang dari 1
  - page dan itemCount bukan number


------ ADMIN ------

Common fail :
- Token tidak ada
- User bukan admin


Meverifikasi akun seller
  POST API/ADMIN/SELLER/[id]/VERIFY
  id => sellerId

  Response Message = "Seller berhasil diverifikasi"

  fail:
  - Seller tidak ditemukan
  - Seller sudah diverifikasi


Mendapatkan semua akun
  GET API/ADMIN/ACCOUNT?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number | undefined, itemCount -> number | undefined, search -> string | undefined
  search -> berdasarkan username/email

  Response Data = accounts: [
      {
          id: string,
          username: string,
          status: enum(ACTIVE/BANNED),
          email: string,
          image: string | null,
          phoneNumber: string | null,
          createdAt: Date,
          updatedAt: Date,
          seller: {
              id: string,
              verifiedAt: string | null,
          } | null
      },
      { ... }
  ]


Mendapatkan akun by id
  GET API/ADMIN/ACCOUNT/[id]
  id => userId

  Response Data = accounts: {
      id: string,
      username: string,
      status: enum(ACTIVE/BANNED),
      email: string,
      image: string | null,
      phoneNumber: string | null,
      createdAt: Date,
      updatedAt: Date,
      seller: {
          id: string,
          verifiedAt: Date | null,
      } | null
  }


Mendapatkan semua akun seller
  GET API/ADMIN/SELLER?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number | undefined, itemCount -> number | undefined, search -> string | undefined
  search -> berdasarkan username/email

  Response Data = accounts: [
      {
          id: string,
          city: string,
          verifiedAt: string | null,
          createdAt: Date,
          user: {
              username: string,
              status: enum(ACTIVE/BANNED),
              email: string,
          }
      },
      { ... }
  ]


Mendapatkan akun seller by id
  GET API/ADMIN/SELLER/[id]
  id => sellerId

  Response Data = {
      account: {
          id: string,
          city: string,
          address: string,
          verifiedAt: string | null,
          updateAt: Date,
          createdAt: Date,
          user: {
              username: string,
              status: enum(ACTIVE/BANNED),
              email: string,
              phoneNumber: string | null,
              image: string | null,
          },
          bank: {
              bankName: string,
              bankNumber: string,
              ownerName: string
          }
      }
  }

  fail:
  - seller tidak ditemukan


Melakukan ban terhadap akun
  POST API/ADMIN/ACCOUNT/[id]/BAN
  id => userId

  Response Message = "Berhasil melakukan ban terhadap akun"

  fail:
  - Akun tidak ada
  - Akun sudah dibanned


  Melakukan unban terhadap akun
  POST API/ADMIN/ACCOUNT/[id]/UNBAN
  id => userId

  Response Message = "Berhasil melakukan unban terhadap akun"

  fail:
  - Akun tidak ada
  - Akun berstatus aktif


Meverifikasi item seller
  POST API/ADMIN/ITEM/[id]/VERIFY
  id => itemId

  Response Message = "Item berhasil di verifikasi"

  fail:
  - Item tidak ditemukan
  - Item sudah diverifikasi


Mendapatkan semua item
  GET API/ADMIN/ITEM?page=x&itemCount=x&search=x

  jika tidak memberi query page atau itemCount maka akan default page = 1, itemCount = 5
  page -> number | undefined, itemCount -> number | undefined, search -> string | undefined
  search -> berdasarkan username/email

  Response Data = {
    items: [
            {
                id: string,
                title: string,
                verifiedAt: Date | null,
                createdAt: Date,
                updatedAt: Date,
                itemImage: [
                    {
                        image: string,
                    },
                    { ... }
                ],
                seller: {
                    id: string,
                    city: string,
                    verifiedAt: Date,
                    user: {
                        username: string,
                        email: string,
                        status: enum(ACTIVE/BANNED)
                    }
                },
                _count: {
                    itemVariant: number
                }
            },
            { ... }
      ]
  }


Mendapatkan item by id
  GET API/ADMIN/ITEM/[id]
  id => itemId

  Response Data = {
    item: {
            id: string,
            title: string,
            verifiedAt: Date | null,
            createdAt: Date,
            updatedAt: Date,
            itemImage: [
                {
                    image: string
                },
                { ... }
            ],
            seller: {
                id: string,
                city: string,
                verifiedAt: Date | null,
                user: {
                    username: string,
                    email: string,
                    status: enum(ACTIVE/BANNED)
                }
            },
            itemVariant: [
                {
                    label: string,
                    price: number,
                    stock: number
                },
                { ... }
            ]
        }
  }

  fail :
  - jika item tidak ditemukan


Menambahkan shipper
  POST API/ADMIN/SHIPPER

  Body Request = {
    name: string,
    price: number > 1000,
    city: string,
  }

  Response Message = "Berhasil menambahkan shipper"


Mengedit Shipper
  PUT API/ADMIN/SHIPPER

  Body Request = {
    id: string, (id => shipperId)
    name: string | undefined, 
    price: number > 1000 | undefined,
    city: string | undefined,
  }

  - Semua key optional tetapi harus mengisikan salah satunya

  Response Message = "Berhasil mengedit shipper"


Menghapus Shipper
  DELETE API/ADMIN/SHIPPER

  Body Request: {
    id: string (id => shipperId)
  }

  Response Message = "Berhasil menghapus shipper"


Mendapatkan Shipper
  > Baca dokumentasi get shipper di guest


